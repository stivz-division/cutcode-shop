<?phpnamespace Domain\Product\QueryBuilders;use Domain\Catalog\Facades\Sorter;use Domain\Catalog\Models\Brand;use Domain\Catalog\Models\Category;use Domain\Catalog\QueryBuilders\BrandQueryBuilder;use Illuminate\Database\Eloquent\Builder;use Illuminate\Pipeline\Pipeline;/** * @method static Brand|ProductQueryBuilder query() */class ProductQueryBuilder extends Builder{    public function homePage(): ProductQueryBuilder    {        return $this->where('on_home_page', true)            ->orderBy('sorting')            ->limit(6);    }    public function filtered(): ProductQueryBuilder    {        return app(Pipeline::class)            ->send($this)            ->through(filters())            ->thenReturn();//        $query->when(request('filters.brands'), function (Builder $q) {//            $q->whereIn('brand_id', request('filters.brands'));//        })->when(request('filters.price'), function (Builder $q) {//            $q->whereBetween('price', [//                request('filters.price.from', 0) * 100,//                request('filters.price.to', 100000) * 100,//            ]);//        });    }    public function sorted(): \Illuminate\Contracts\Database\Eloquent\Builder|ProductQueryBuilder    {        return Sorter::run($this);    }    public function withCategory(Category $category): ProductQueryBuilder    {        return $this->when($category->exists, function (Builder $query) use ($category) {            $query->whereRelation(                'categories',                'categories.id',                '=',                $category->id            );        });    }    public function search(): ProductQueryBuilder    {        return $this->when(request('s'), function (Builder $query) {            $query->whereFullText(['title', 'text'], request('s'));        });    }}